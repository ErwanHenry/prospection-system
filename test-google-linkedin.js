#!/usr/bin/env node

require('dotenv').config();
const googleScraper = require('./backend/services/linkedinGoogleScraper');

async function testGoogleLinkedIn() {
  console.log('üîç TEST SCRAPER GOOGLE LINKEDIN - APPROCHE INNOVANTE');
  console.log('='.repeat(60));
  console.log('üí° Cette approche contourne LinkedIn en passant par Google Search');
  console.log('üéØ Utilise des commandes Google avanc√©es: site:, inurl:, intitle:');
  console.log('');
  
  try {
    console.log('1Ô∏è‚É£ Initialisation du scraper Google...');
    const initialized = await googleScraper.initialize();
    
    if (!initialized) {
      console.log('‚ùå √âchec d\'initialisation');
      return;
    }
    
    console.log('‚úÖ Scraper Google initialis√© avec succ√®s');
    
    // Test avec diff√©rentes requ√™tes
    const testQueries = [
      'software engineer',
      'frontend developer',
      'product manager'
    ];
    
    for (const query of testQueries) {
      console.log(`\n2Ô∏è‚É£ Test recherche: "${query}"`);
      console.log('-'.repeat(40));
      
      const startTime = Date.now();
      const results = await googleScraper.search(query, 5);
      const searchTime = Date.now() - startTime;
      
      console.log(`üìä ${results.length} profils trouv√©s en ${searchTime}ms`);
      
      if (results.length > 0) {
        console.log('\nüìã PROFILS LINKEDIN VIA GOOGLE:');
        
        let realProfilesCount = 0;
        
        results.forEach((profile, index) => {
          console.log(`\n   ${index + 1}. üë§ ${profile.name}`);
          console.log(`      üìä Titre: ${profile.title || 'Non sp√©cifi√©'}`);
          console.log(`      üîó URL: ${profile.linkedinUrl}`);
          console.log(`      üÜî ID: ${profile.linkedinId}`);
          console.log(`      ‚öôÔ∏è M√©thode: ${profile.method}`);
          console.log(`      üéØ Score: ${profile.searchScore}`);
          
          // V√©rification de validit√©
          if (profile.linkedinUrl && 
              profile.linkedinUrl.includes('linkedin.com/in/') && 
              profile.linkedinId && 
              profile.linkedinId.length > 2 &&
              profile.name && 
              profile.name.length > 3 &&
              !profile.name.includes('LinkedIn')) {
            console.log(`      ‚úÖ PROFIL LINKEDIN R√âEL D√âTECT√â`);
            realProfilesCount++;
          } else {
            console.log(`      ‚ö†Ô∏è Profil suspect ou incomplet`);
          }
        });
        
        console.log(`\nüìà ANALYSE: ${realProfilesCount}/${results.length} profils r√©els (${Math.round((realProfilesCount/results.length)*100)}%)`);
        
        if (realProfilesCount > 0) {
          console.log('üéâ SUCC√àS ! L\'approche Google fonctionne !');
          console.log('‚úÖ Contournement des protections LinkedIn r√©ussi');
          console.log('üîç Google indexe et expose les profils LinkedIn publics');
        } else {
          console.log('‚ö†Ô∏è Aucun profil r√©el valid√©');
        }
        
      } else {
        console.log('‚ùå Aucun r√©sultat trouv√©');
        console.log('üí° Causes possibles:');
        console.log('   - Google rate limiting actif');
        console.log('   - Captcha Google d√©tect√©');
        console.log('   - Requ√™te trop sp√©cifique');
      }
      
      // D√©lai entre les tests
      if (testQueries.indexOf(query) < testQueries.length - 1) {
        console.log('\n‚è≥ Attente de 3 secondes pour √©viter rate limiting...');
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }
    
    console.log('\n3Ô∏è‚É£ Test de sant√©...');
    const health = await googleScraper.healthCheck();
    console.log('‚úÖ √âtat:', JSON.stringify(health, null, 2));
    
    console.log('\nüéØ AVANTAGES DE L\'APPROCHE GOOGLE:');
    console.log('   ‚úÖ Contourne compl√®tement les protections LinkedIn');
    console.log('   ‚úÖ Acc√®s aux profils publics index√©s par Google');
    console.log('   ‚úÖ Utilise les commandes de recherche avanc√©es');
    console.log('   ‚úÖ Pas besoin de cookie LinkedIn');
    console.log('   ‚úÖ Plus stable que le scraping direct');
    
    console.log('\n‚ö†Ô∏è LIMITATIONS:');
    console.log('   - Seuls les profils publics sont accessibles');
    console.log('   - Google peut appliquer un rate limiting');
    console.log('   - Informations parfois limit√©es dans Google');
    console.log('   - D√©pend de l\'indexation Google');
    
    console.log('\nüí° COMMANDES GOOGLE UTILIS√âES:');
    console.log('   - site:linkedin.com/in/ "query"');
    console.log('   - inurl:linkedin.com/in "query"');
    console.log('   - intitle:"query" site:linkedin.com');
    console.log('   - Variations avec synonymes et m√©tiers');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    console.log('\nüîß Solutions possibles:');
    console.log('   1. V√©rifier la connexion Internet');
    console.log('   2. Attendre quelques minutes (rate limiting Google)');
    console.log('   3. Utiliser un VPN si Google bloque l\'IP');
    console.log('   4. Ajuster les d√©lais entre requ√™tes');
  } finally {
    console.log('\nüßπ Nettoyage...');
    await googleScraper.close();
    console.log('‚úÖ Test Google LinkedIn termin√©');
    
    console.log('\nüìù CONCLUSION:');
    console.log('Cette approche via Google repr√©sente une innovation majeure');
    console.log('pour contourner les protections anti-scraping de LinkedIn.');
    console.log('Elle exploite le fait que Google indexe les profils publics.');
  }
}

testGoogleLinkedIn().catch(console.error);