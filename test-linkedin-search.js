require('dotenv').config();
const linkedInScraper = require('./backend/services/linkedinScraper');
const googleSheetsService = require('./backend/services/googleSheets');

async function testLinkedInSearch() {
    console.log('\nüß™ Test de recherche LinkedIn avec Puppeteer\n');
    
    try {
        // 1. V√©rifier le cookie
        const cookie = process.env.LINKEDIN_COOKIE;
        if (!cookie || cookie === 'PASTE_YOUR_LI_AT_COOKIE_HERE') {
            console.error('‚ùå Cookie LinkedIn non configur√©!');
            console.log('\nüìù Pour configurer:');
            console.log('1. nano ~/prospection-system/.env');
            console.log('2. Remplacez PASTE_YOUR_LI_AT_COOKIE_HERE par votre cookie li_at');
            console.log('3. Sauvegardez et relancez ce script\n');
            return;
        }
        
        console.log('‚úÖ Cookie trouv√© dans .env');
        console.log('Cookie (preview):', cookie.substring(0, 20) + '...');
        
        // 2. Initialiser Puppeteer
        console.log('\nüé≠ Initialisation de Puppeteer...');
        const initialized = await linkedInScraper.initialize(cookie);
        
        if (!initialized || !linkedInScraper.isAuthenticated) {
            console.error('‚ùå √âchec de l\'authentification LinkedIn');
            console.log('V√©rifiez que votre cookie est valide et non expir√©');
            return;
        }
        
        console.log('‚úÖ Connect√© √† LinkedIn avec succ√®s!');
        
        // 3. Effectuer une recherche
        const query = 'CTO startup Paris';
        console.log(`\nüîç Recherche: "${query}"...`);
        console.log('(Cela peut prendre 10-30 secondes)\n');
        
        const profiles = await linkedInScraper.searchProfiles(query, 5);
        
        // 4. Afficher les r√©sultats
        console.log(`\n‚úÖ ${profiles.length} profils trouv√©s:\n`);
        
        profiles.forEach((profile, i) => {
            console.log(`${i + 1}. ${profile.firstName} ${profile.lastName}`);
            console.log(`   ${profile.position} ${profile.company ? 'chez ' + profile.company : ''}`);
            console.log(`   üìç ${profile.location || 'Localisation non renseign√©e'}`);
            console.log(`   üîó ${profile.linkedinUrl}`);
            console.log('');
        });
        
        // 5. Initialiser Google Sheets
        console.log('üìÑ Connexion √† Google Sheets...');
        const sheetsConnected = await googleSheetsService.initialize();
        
        if (sheetsConnected) {
            await googleSheetsService.ensureStructure();
            console.log('‚úÖ Google Sheets connect√©!');
            console.log('üîó URL:', googleSheetsService.getSpreadsheetUrl());
            
            // Proposer d'ajouter au CRM
            if (profiles.length > 0) {
                console.log('\nüíæ Ajout du premier profil au CRM comme test...');
                const testProspect = {
                    ...profiles[0],
                    status: 'Nouveau',
                    notes: 'Import test depuis Puppeteer'
                };
                
                const success = await googleSheetsService.addProspect(testProspect);
                if (success) {
                    console.log('‚úÖ Prospect ajout√© avec succ√®s au CRM!');
                }
            }
        }
        
    } catch (error) {
        console.error('\n‚ùå Erreur:', error.message);
        console.error(error);
    } finally {
        // Fermer Puppeteer
        console.log('\nüé¨ Fermeture de Puppeteer...');
        await linkedInScraper.close();
        console.log('‚úÖ Termin√©!');
        process.exit(0);
    }
}

// Lancer le test
testLinkedInSearch();
