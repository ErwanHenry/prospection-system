#!/usr/bin/env node

/**
 * D√©monstration compl√®te du workflow prospection-system
 * Ex√©cute un sc√©nario r√©el de bout en bout
 */

const axios = require('axios');

const API_URL = 'http://localhost:3000/api';

console.log('üöÄ D√âMONSTRATION WORKFLOW COMPLET\n');

async function demoWorkflow() {
    console.log('=' .repeat(60));
    console.log('üéØ SC√âNARIO: Prospection HRBP √† Paris');
    console.log('=' .repeat(60));

    // √âtape 1: Recherche LinkedIn
    console.log('\nüìç √âTAPE 1: Recherche de prospects via Apollo.io');
    console.log('Requ√™te: "HRBP Paris", Limite: 5 profils\n');
    
    try {
        const searchResponse = await axios.post(`${API_URL}/linkedin/search`, {
            query: "HRBP Paris",
            limit: 5,
            method: "apollo"
        });

        if (searchResponse.data.success) {
            console.log(`‚úÖ Trouv√© ${searchResponse.data.results.length} profils LinkedIn:`);
            searchResponse.data.results.forEach((profile, index) => {
                console.log(`   ${index + 1}. ${profile.name}`);
                console.log(`      üìç ${profile.title} @ ${profile.company}`);
                console.log(`      üìß ${profile.email}`);
                console.log(`      üîó ${profile.linkedinUrl}`);
                console.log('');
            });

            // √âtape 2: Ajouter au CRM
            console.log('\nüìç √âTAPE 2: Ajout des prospects au CRM Google Sheets');
            
            const prospectsForCRM = searchResponse.data.results.map(result => ({
                name: result.name,
                title: result.title,
                company: result.company,
                location: result.location,
                linkedinUrl: result.linkedinUrl,
                email: result.email && result.email !== 'email_not_unlocked@domain.com' ? result.email : '',
                phone: result.phone || '',
                score: result.searchScore || 95,
                tags: "HRBP Paris Demo"
            }));

            const addResponse = await axios.post(`${API_URL}/linkedin/add-to-crm`, {
                prospects: prospectsForCRM
            });

            if (addResponse.data.success) {
                console.log(`‚úÖ Ajout√© ${addResponse.data.added} prospects au CRM`);

                // √âtape 3: G√©n√©ration d'emails personnalis√©s
                console.log('\nüìç √âTAPE 3: G√©n√©ration d\'emails IA personnalis√©s');
                
                for (let i = 0; i < Math.min(3, prospectsForCRM.length); i++) {
                    const prospect = prospectsForCRM[i];
                    console.log(`\nü§ñ G√©n√©ration email pour ${prospect.name}...`);

                    try {
                        const emailResponse = await axios.post(`${API_URL}/automation/generate-email`, {
                            prospect: prospect
                        });

                        if (emailResponse.data.success) {
                            const email = emailResponse.data.email;
                            const profileAnalyzed = emailResponse.data.profileAnalyzed;
                            
                            console.log(`‚úÖ Email g√©n√©r√© ${profileAnalyzed ? '(avec analyse profil)' : '(template basique)'}`);
                            console.log(`üìß Sujet: "${email.subject}"`);
                            console.log(`üìù Contenu (${email.content.length} chars):`);
                            console.log('‚îÄ'.repeat(40));
                            
                            // Afficher un aper√ßu du contenu
                            const preview = email.content.substring(0, 200) + '...';
                            console.log(preview);
                            console.log('‚îÄ'.repeat(40));
                            
                            if (profileAnalyzed && emailResponse.data.insights) {
                                console.log(`üîç Insights: S√©niorit√©: ${emailResponse.data.insights.seniority}, Industrie: ${emailResponse.data.insights.industry}`);
                            }
                        } else {
                            console.log(`‚ùå Erreur g√©n√©ration email: ${emailResponse.data.error}`);
                        }
                    } catch (error) {
                        console.log(`‚ùå Erreur g√©n√©ration email: ${error.message}`);
                    }
                }

                // √âtape 4: V√©rification CRM
                console.log('\nüìç √âTAPE 4: V√©rification des donn√©es CRM');
                
                const crmResponse = await axios.get(`${API_URL}/sheets/data`);
                if (crmResponse.data.success) {
                    const totalProspects = crmResponse.data.data.length - 1; // Minus header
                    console.log(`‚úÖ CRM contient maintenant ${totalProspects} prospects au total`);
                    
                    // Afficher les derniers ajouts
                    const recentProspects = crmResponse.data.data.slice(-6, -1); // 5 derniers
                    console.log('\nüìä Derniers prospects ajout√©s:');
                    recentProspects.forEach((row, index) => {
                        console.log(`   ${index + 1}. ${row[2]} (${row[3]}) @ ${row[4]}`);
                    });
                }

                // √âtape 5: Statistiques automation
                console.log('\nüìç √âTAPE 5: √âtat de l\'automatisation');
                
                const automationResponse = await axios.get(`${API_URL}/automation/health`);
                console.log(`‚úÖ Service d'automatisation: ${automationResponse.data.status}`);
                console.log(`üìß Email configur√©: ${automationResponse.data.emailConfigured}`);
                console.log(`‚è∞ Follow-ups programm√©s: ${automationResponse.data.followUpsScheduled}`);
                console.log(`üõ†Ô∏è Fonctionnalit√©s: ${automationResponse.data.features.join(', ')}`);

            } else {
                console.log('‚ùå Erreur ajout au CRM:', addResponse.data.error);
            }

        } else {
            console.log('‚ùå Erreur recherche LinkedIn:', searchResponse.data.error);
        }

    } catch (error) {
        console.log('‚ùå Erreur lors de la d√©monstration:', error.message);
        return;
    }

    // R√©sum√© final
    console.log('\n' + '='.repeat(60));
    console.log('üéâ D√âMONSTRATION COMPL√àTE TERMIN√âE');
    console.log('='.repeat(60));
    console.log('‚úÖ Recherche LinkedIn (Apollo.io) ‚Üí Profils r√©els');
    console.log('‚úÖ Sauvegarde CRM (Google Sheets) ‚Üí Donn√©es persistantes');
    console.log('‚úÖ G√©n√©ration emails IA ‚Üí Personnalisation avanc√©e');
    console.log('‚úÖ Syst√®me d\'automatisation ‚Üí Workflow complet');
    console.log('\nüåê Interface web disponible: http://localhost:3000');
    console.log('üß™ Tests automatiques: node test-workflow.js');
    console.log('üìñ Documentation: voir TROUBLESHOOTING.md');
    console.log('\nüöÄ LE SYST√àME EST PR√äT POUR UTILISATION PRODUCTION !');
}

// V√©rifier que le serveur est en marche
async function checkServer() {
    try {
        await axios.get(`${API_URL}/health`);
        return true;
    } catch (error) {
        console.log('‚ùå Serveur non disponible sur http://localhost:3000');
        console.log('üí° D√©marrer avec: npm start');
        return false;
    }
}

// Lancer la d√©monstration
checkServer().then(serverReady => {
    if (serverReady) {
        demoWorkflow().catch(console.error);
    }
});