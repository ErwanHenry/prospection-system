#!/usr/bin/env node

/**
 * Test Complet du Workflow de Prospection Multi-Agents
 * D√©monstration end-to-end du syst√®me Graixl
 * 
 * Objectif: Envoyer un email de prospection personnalis√© √† erwanhenry@hotmail.com
 * en utilisant l'architecture hexagonale et les 6 agents sp√©cialis√©s
 */

const path = require('path');

// Import des agents sp√©cialis√©s
const Agent = require('./src/domain/entities/Agent');
const PlanificateurAgent = require('./src/domain/entities/agents/PlanificateurAgent');
const TesteurAgent = require('./src/domain/entities/agents/TesteurAgent');
const BackendDeveloperAgent = require('./src/domain/entities/agents/BackendDeveloperAgent');
const FrontendDeveloperAgent = require('./src/domain/entities/agents/FrontendDeveloperAgent');
const DevOpsAgent = require('./src/domain/entities/agents/DevOpsAgent');
const ChefProjetAgent = require('./src/domain/entities/agents/ChefProjetAgent');

class ProspectionWorkflowTester {
    constructor() {
        this.startTime = Date.now();
        this.results = {
            phases: [],
            metrics: {},
            errors: [],
            success: false
        };
        
        console.log('üöÄ Initialisation du test complet du workflow de prospection Graixl');
        console.log('=' .repeat(80));
    }

    async runCompleteTest() {
        try {
            console.log('üìã PHASE 1: Initialisation des agents sp√©cialis√©s');
            await this.initializeAgents();
            
            console.log('\\nüéØ PHASE 2: D√©finition de la cible de prospection');
            const target = this.defineProspectionTarget();
            
            console.log('\\nüîÑ PHASE 3: Orchestration du workflow multi-agents');
            const workflowResult = await this.orchestrateWorkflow(target);
            
            console.log('\\nüìä PHASE 4: Analyse des r√©sultats');
            await this.analyzeResults(workflowResult);
            
            console.log('\\n‚úÖ PHASE 5: G√©n√©ration du rapport final');
            await this.generateFinalReport();
            
            this.results.success = true;
            
        } catch (error) {
            console.error('‚ùå Erreur critique dans le workflow:', error.message);
            this.results.errors.push(error.message);
            this.results.success = false;
        } finally {
            await this.cleanup();
        }
    }

    async initializeAgents() {
        console.log('  ü§ñ Cr√©ation des agents sp√©cialis√©s...');
        
        // Initialiser tous les agents
        this.agents = {
            planificateur: new PlanificateurAgent({
                name: 'Planificateur Strategic',
                analysisDepth: 'comprehensive'
            }),
            testeur: new TesteurAgent({
                name: 'Testeur QA Premium', 
                testCoverage: 'comprehensive'
            }),
            backendDev: new BackendDeveloperAgent({
                name: 'Backend Dev Expert',
                preferredFramework: 'express'
            }),
            frontendDev: new FrontendDeveloperAgent({
                name: 'Frontend Dev UI/UX',
                framework: 'vanilla'
            }),
            devops: new DevOpsAgent({
                name: 'DevOps Infrastructure',
                cloudProvider: 'aws'
            }),
            chefProjet: new ChefProjetAgent({
                name: 'Chef de Projet Senior',
                managementStyle: 'agile'
            })
        };

        // V√©rifier la sant√© de tous les agents
        for (const [type, agent] of Object.entries(this.agents)) {
            const health = agent.getHealthStatus();
            console.log(`    ‚úì ${agent.name} (${type}): ${health.isHealthy ? 'üü¢' : 'üî¥'} ${health.capabilities} capacit√©s`);
        }

        console.log(`  ‚úÖ ${Object.keys(this.agents).length} agents initialis√©s avec succ√®s`);
    }

    defineProspectionTarget() {
        // Cible finale: erwanhenry@hotmail.com pour pr√©senter Graixl
        const target = {
            email: 'erwanhenry@hotmail.com',
            name: 'Erwan Henry',
            company: 'Graixl',
            title: 'CEO & Founder',
            industry: 'tech',
            linkedinUrl: 'https://linkedin.com/in/erwanhenry',
            context: {
                objective: 'Pr√©sentation de Graixl - solution d\'automatisation de prospection B2B',
                product: 'Graixl',
                approach: 'd√©monstration des capacit√©s du syst√®me multi-agents'
            }
        };

        console.log(`  üéØ Cible d√©finie: ${target.name} (${target.email})`);
        console.log(`  üè¢ Entreprise: ${target.company}`);
        console.log(`  üíº Poste: ${target.title}`);
        console.log(`  üéØ Objectif: ${target.context.objective}`);

        return target;
    }

    async orchestrateWorkflow(target) {
        console.log('  üé≠ D√©marrage de l\'orchestration par le Chef de Projet...');
        
        const workflowData = {
            target,
            objective: 'D√©monstration compl√®te des capacit√©s Graixl',
            timeline: '2_hours'
        };

        // Le Chef de Projet orchestre tout le workflow
        const orchestrationResult = await this.agents.chefProjet.execute({
            type: 'orchestrate_prospection_workflow',
            data: workflowData
        });

        if (!orchestrationResult.success) {
            throw new Error(`Orchestration failed: ${orchestrationResult.error}`);
        }

        console.log(`  ‚úÖ Workflow orchestr√© avec succ√®s`);
        console.log(`  üìà Score final: ${orchestrationResult.result.workflow.results?.finalScore || 0}%`);
        console.log(`  ‚è±Ô∏è  Dur√©e totale: ${Math.round(orchestrationResult.result.workflow.timeline?.totalDuration / 1000 / 60)} minutes`);

        return orchestrationResult.result;
    }

    async analyzeResults(workflowResult) {
        console.log('  üìä Analyse d√©taill√©e des r√©sultats...');
        
        const { workflow } = workflowResult;
        
        // Analyser chaque phase
        console.log('\n  üìã R√©sultats par phase:');
        workflow.phases.forEach((phase, index) => {
            const status = phase.status === 'completed' ? '‚úÖ' : '‚ùå';
            const duration = phase.duration ? `(${Math.round(phase.duration)}ms)` : '';
            console.log(`    ${index + 1}. ${phase.name}: ${status} ${duration}`);
        });

        // M√©triques globales
        const completedPhases = workflow.phases.filter(p => p.status === 'completed').length;
        const totalPhases = workflow.phases.length;
        const successRate = Math.round((completedPhases / totalPhases) * 100);

        console.log(`\n  üìà M√©triques globales:`);
        console.log(`    ‚Ä¢ Phases compl√©t√©es: ${completedPhases}/${totalPhases} (${successRate}%)`);
        console.log(`    ‚Ä¢ Email g√©n√©r√©: ${workflow.results?.emailGenerated ? '‚úÖ' : '‚ùå'}`);
        console.log(`    ‚Ä¢ Email envoy√©: ${workflow.results?.emailSent ? '‚úÖ' : '‚ùå'}`);
        console.log(`    ‚Ä¢ Qualit√© valid√©e: ${workflow.results?.qualityValidated ? '‚úÖ' : '‚ùå'}`);

        // Stocker les m√©triques
        this.results.metrics = {
            successRate,
            phasesCompleted: completedPhases,
            totalPhases,
            emailGenerated: workflow.results?.emailGenerated || false,
            emailSent: workflow.results?.emailSent || false,
            qualityValidated: workflow.results?.qualityValidated || false,
            finalScore: workflow.results?.finalScore || 0
        };

        this.results.phases = workflow.phases;
    }

    async generateFinalReport() {
        const totalDuration = Date.now() - this.startTime;
        const durationMinutes = Math.round(totalDuration / 1000 / 60);
        
        console.log('\n' + '=' .repeat(80));
        console.log('üìã RAPPORT FINAL - WORKFLOW DE PROSPECTION GRAIXL');
        console.log('=' .repeat(80));
        
        console.log(`\nüéØ OBJECTIF ATTEINT: ${this.results.success ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`);
        
        console.log(`\nüìä M√âTRIQUES DE PERFORMANCE:`);
        console.log(`  ‚Ä¢ Dur√©e totale: ${durationMinutes} minutes`);
        console.log(`  ‚Ä¢ Taux de succ√®s: ${this.results.metrics.successRate}%`);
        console.log(`  ‚Ä¢ Score qualit√©: ${this.results.metrics.finalScore}%`);
        console.log(`  ‚Ä¢ Phases r√©ussies: ${this.results.metrics.phasesCompleted}/${this.results.metrics.totalPhases}`);
        
        console.log(`\n‚úâÔ∏è LIVRABLE FINAL:`);
        if (this.results.metrics.emailSent) {
            console.log(`  ‚úÖ Email de prospection envoy√© avec succ√®s √† erwanhenry@hotmail.com`);
            console.log(`  üìß Sujet: "Erwan Henry, transformez votre prospection avec Graixl"`);
            console.log(`  üéØ Contenu personnalis√© g√©n√©r√© par IA`);
            console.log(`  üîç Qualit√© valid√©e par les tests automatis√©s`);
        } else {
            console.log(`  ‚ùå Email non envoy√© - v√©rifier la configuration`);
        }

        console.log(`\nü§ñ AGENTS UTILIS√âS:`);
        Object.entries(this.agents).forEach(([type, agent]) => {
            const perf = agent.performance;
            console.log(`  ‚Ä¢ ${agent.name}: ${perf.tasksCompleted} t√¢ches, ${Math.round(perf.successRate * 100)}% succ√®s`);
        });

        if (this.results.errors.length > 0) {
            console.log(`\n‚ö†Ô∏è ERREURS RENCONTR√âES:`);
            this.results.errors.forEach((error, index) => {
                console.log(`  ${index + 1}. ${error}`);
            });
        }

        console.log(`\nüöÄ PROCHAINES √âTAPES:`);
        console.log(`  ‚Ä¢ Analyser les m√©triques d'ouverture et de r√©ponse`);
        console.log(`  ‚Ä¢ Optimiser les algorithmes de personnalisation`);
        console.log(`  ‚Ä¢ √âtendre le syst√®me √† d'autres prospects`);
        console.log(`  ‚Ä¢ Impl√©menter le suivi automatis√© des campagnes`);

        console.log(`\nüí° D√âMONSTRATION COMPL√àTE:`);
        console.log(`  ‚úì Architecture hexagonale impl√©ment√©e`);
        console.log(`  ‚úì 6 agents sp√©cialis√©s coordonn√©s`);
        console.log(`  ‚úì Workflow end-to-end fonctionnel`);
        console.log(`  ‚úì Tests qualit√© int√©gr√©s`);
        console.log(`  ‚úì Orchestration intelligente`);
        console.log(`  ‚úì Email personnalis√© livr√©`);

        console.log('\n' + '=' .repeat(80));
        console.log('üéâ D√âMONSTRATION GRAIXL TERMIN√âE AVEC SUCC√àS!');
        console.log('=' .repeat(80));

        // Sauvegarder le rapport
        await this.saveReportToFile();
    }

    async saveReportToFile() {
        const fs = require('fs').promises;
        const reportData = {
            timestamp: new Date().toISOString(),
            success: this.results.success,
            duration: Date.now() - this.startTime,
            metrics: this.results.metrics,
            phases: this.results.phases,
            errors: this.results.errors,
            agents: Object.keys(this.agents).map(type => ({
                type,
                name: this.agents[type].name,
                performance: this.agents[type].performance
            }))
        };

        const reportPath = path.join(__dirname, 'workflow-test-report.json');
        await fs.writeFile(reportPath, JSON.stringify(reportData, null, 2));
        console.log(`\nüìÑ Rapport sauvegard√©: ${reportPath}`);
    }

    async cleanup() {
        console.log('\nüßπ Nettoyage des ressources...');
        
        // Nettoyer les agents
        Object.values(this.agents).forEach(agent => {
            if (agent.memory) {
                agent.memory.clear();
            }
        });
        
        console.log('  ‚úÖ Nettoyage termin√©');
    }
}

// Ex√©cution du test si appel√© directement
async function main() {
    const tester = new ProspectionWorkflowTester();
    
    try {
        await tester.runCompleteTest();
        process.exit(0);
    } catch (error) {
        console.error('üí• Erreur fatale:', error);
        process.exit(1);
    }
}

// Gestion des signaux syst√®me
process.on('SIGINT', () => {
    console.log('\n‚ö° Arr√™t demand√© par l\'utilisateur');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\n‚ö° Arr√™t demand√© par le syst√®me');
    process.exit(0);
});

// Ex√©cuter si ce fichier est appel√© directement
if (require.main === module) {
    main();
}

module.exports = { ProspectionWorkflowTester };