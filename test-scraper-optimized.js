#!/usr/bin/env node

/**
 * Test du scraper LinkedIn optimis√©
 */

require('dotenv').config();

async function testOptimizedScraper() {
  console.log('üß™ TEST DU SCRAPER LINKEDIN OPTIMIS√â');
  console.log('='.repeat(50));
  
  const linkedinScraperOptimized = require('./backend/services/linkedinScraperOptimized');
  
  try {
    // Test d'initialisation
    console.log('\n1Ô∏è‚É£ Test d\'initialisation...');
    const initialized = await linkedinScraperOptimized.initialize();
    
    if (!initialized) {
      console.log('‚ùå √âchec de l\'initialisation');
      return;
    }
    
    console.log('‚úÖ Initialisation r√©ussie !');
    
    // Test de recherche
    console.log('\n2Ô∏è‚É£ Test de recherche...');
    const searchQuery = 'software engineer';
    const results = await linkedinScraperOptimized.search(searchQuery, 3);
    
    console.log(`‚úÖ Recherche termin√©e: ${results.length} r√©sultats`);
    
    if (results.length > 0) {
      console.log('\nüìã Profils trouv√©s:');
      results.forEach((profile, index) => {
        console.log(`   ${index + 1}. ${profile.name}`);
        console.log(`      URL: ${profile.linkedinUrl}`);
        console.log(`      M√©thode: ${profile.method || 'standard'}`);
        console.log('');
      });
    }
    
    // Test de sant√©
    console.log('\n3Ô∏è‚É£ Test de sant√©...');
    const health = await linkedinScraperOptimized.healthCheck();
    console.log('‚úÖ √âtat de sant√©:', JSON.stringify(health, null, 2));
    
    console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
    console.log('‚úÖ Le scraper LinkedIn fonctionne correctement');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  } finally {
    // Nettoyage
    await linkedinScraperOptimized.close();
    console.log('üßπ Nettoyage termin√©');
  }
}

testOptimizedScraper().catch(console.error);